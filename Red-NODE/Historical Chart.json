[
    {
        "id": "a1acccb3.2bec1",
        "type": "tab",
        "label": "Historical Chart",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1565271c.79ca99",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Create a Chart Array for Chart.js",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\n// The Array has this structure, inserting the first element as a template.\nvar ChartData = [ {\"series\":[\"Data\"],\n                   \"data\":[[{\"x\":msg.payload[0].time,\"y\":msg.payload[0].stat}]],\n                   \"labels\":[\"Data\"]}];\n\n// Start at 1 because we've already added element 0 in the initial array definition\nfor( var i=1; i < msg.payload.length; i++ ) {\n    ChartData[0].data[0].push( { \"x\":msg.payload[i].time,\"y\":msg.payload[i].stat } );\n}\n// Now we need to sort on the time so that we give the Chart node an array in time order\n//ChartData[0].data[0].sort(function sortNumber(a,b) { return a.x - b.x; });\n\nmsg.payload = ChartData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "2743f17.fe8ee0e",
        "type": "cloudant in",
        "z": "a1acccb3.2bec1",
        "name": "",
        "cloudant": "",
        "database": "historicaldata",
        "service": "IBM workshop TJS-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 270,
        "y": 380,
        "wires": [
            [
                "e3311afa.0f6ca8"
            ]
        ]
    },
    {
        "id": "b184a280.106df",
        "type": "ui_button",
        "z": "a1acccb3.2bec1",
        "name": "",
        "group": "4a7dba1d.0bee34",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "View",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "2743f17.fe8ee0e"
            ]
        ]
    },
    {
        "id": "ce8a69e6.6f6228",
        "type": "comment",
        "z": "a1acccb3.2bec1",
        "name": "http request technique",
        "info": "",
        "x": 160,
        "y": 940,
        "wires": []
    },
    {
        "id": "d070fd5f.2ba1e",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Set up Search Parameters",
        "func": "//var VCAP = JSON.parse(context.global.process.env.VCAP_SERVICES);\n//var cloudant = VCAP.cloudantNoSQLDB[0].credentials.url;\nvar cloudant =\"https://6f66f491-b57e-43b6-b1f3-437828f407bc-bluemix:2207a24ad26ab3a12f4eebcfa028d1afc10f1fec4c967344b364dd6b2303bc9c@6f66f491-b57e-43b6-b1f3-437828f407bc-bluemix.cloudant.com\"\n\nvar date = msg.payload;\n\nmsg.count=0;\n\nmsg.query='/uhc2jan2018/_design/byField/_search/timestamp?q=' + date + event + device + '&sort=\"ts\"&include_docs=true&limit=200';\nmsg.query='/uhcnuggets03012019/_design/byField/_search/timestamp?q=' + date + event + device + '&sort=\"ts\"&include_docs=true&limit=200';\n\nmsg.url = cloudant + msg.query\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "9cde4704.acdb98",
        "type": "change",
        "z": "a1acccb3.2bec1",
        "name": "Query Payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"query\":\"OrderId:'1801'\",\"limit\":100}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1040,
        "wires": [
            [
                "b3094bff.9ca658"
            ]
        ]
    },
    {
        "id": "b3094bff.9ca658",
        "type": "cloudant in",
        "z": "a1acccb3.2bec1",
        "name": "by Index of pos-paid-testdec17",
        "cloudant": "d98fe0ec.3748e",
        "database": "pos-paid-testdec17",
        "service": "_ext_",
        "search": "_idx_",
        "design": "QueueName",
        "index": "QueueName",
        "x": 550,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "17117672.75c91a",
        "type": "inject",
        "z": "a1acccb3.2bec1",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "9cde4704.acdb98"
            ]
        ]
    },
    {
        "id": "aaa6da1d.d2c458",
        "type": "comment",
        "z": "a1acccb3.2bec1",
        "name": "Select Date Range",
        "info": "",
        "x": 470,
        "y": 680,
        "wires": []
    },
    {
        "id": "8d5dd662.46ec18",
        "type": "ui_date_picker",
        "z": "a1acccb3.2bec1",
        "name": "",
        "label": "Start Date",
        "group": "9a3ba5c9.628aa8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "x": 630,
        "y": 720,
        "wires": [
            [
                "acd18c5.6d8d67"
            ]
        ]
    },
    {
        "id": "6df21c94.a41444",
        "type": "ui_date_picker",
        "z": "a1acccb3.2bec1",
        "name": "",
        "label": "End Date",
        "group": "9a3ba5c9.628aa8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "",
        "x": 630,
        "y": 760,
        "wires": [
            [
                "b1f615e5.cd8eb8"
            ]
        ]
    },
    {
        "id": "2175ef03.69868",
        "type": "change",
        "z": "a1acccb3.2bec1",
        "name": "Start Date",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1451624400000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 720,
        "wires": [
            [
                "8d5dd662.46ec18"
            ]
        ]
    },
    {
        "id": "4984eee9.81582",
        "type": "change",
        "z": "a1acccb3.2bec1",
        "name": "End Date",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1577750401000",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 760,
        "wires": [
            [
                "6df21c94.a41444"
            ]
        ]
    },
    {
        "id": "acd18c5.6d8d67",
        "type": "change",
        "z": "a1acccb3.2bec1",
        "name": "Start Time Range",
        "rules": [
            {
                "t": "set",
                "p": "start-time",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "b1f615e5.cd8eb8",
        "type": "change",
        "z": "a1acccb3.2bec1",
        "name": "End Time Range",
        "rules": [
            {
                "t": "set",
                "p": "end-time",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "22ecd934.8c2666",
        "type": "inject",
        "z": "a1acccb3.2bec1",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "4984eee9.81582",
                "2175ef03.69868"
            ]
        ]
    },
    {
        "id": "2b12edac.2425e2",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Oganize Data for Donut Stat",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\n\n\nvar StatesCount = [0,0,0,0]; //Here is considered the Alarm state yet\nvar total =0;\nfor( var i=0; i < msg.payload.length; i++ ) {\n    StatesCount[msg.payload[i].stat]++;\n    if(msg.payload[i].stat!=3){\n        total++;   \n    }\n}\n\nvar pie={}; //Create the pie graph\npie.labels = [\"Normal\",\"Active\",\"Out of Range\"];\npie.series = ['Data'];\npie.data =   [ [StatesCount[0]*100/total,StatesCount[1]*100/total,StatesCount[2]*100/total] ]; //The value in percentage\n\n\nreturn {payload:[pie]};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 980,
        "y": 160,
        "wires": [
            [
                "f41907c8.3f7578"
            ]
        ]
    },
    {
        "id": "b08b2d00.d26d9",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Format Time Series DB record",
        "func": "msg.payload = {\n        time:     new Date().getTime(),\n        wet:     false,\n        stat:    0\n    } ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "945378a1.7a71e8",
                "745f5567.bd814c"
            ]
        ]
    },
    {
        "id": "745f5567.bd814c",
        "type": "debug",
        "z": "a1acccb3.2bec1",
        "name": "Inserted Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1640,
        "y": 1020,
        "wires": []
    },
    {
        "id": "945378a1.7a71e8",
        "type": "cloudant out",
        "z": "a1acccb3.2bec1",
        "name": "",
        "cloudant": "",
        "database": "historicaldata",
        "service": "IBM workshop TJS-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1630,
        "y": 1060,
        "wires": []
    },
    {
        "id": "484b5951.45be08",
        "type": "comment",
        "z": "a1acccb3.2bec1",
        "name": "Insert Data Manually to Database",
        "info": "",
        "x": 1390,
        "y": 1000,
        "wires": []
    },
    {
        "id": "52f18d26.d722f4",
        "type": "inject",
        "z": "a1acccb3.2bec1",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1040,
        "y": 1040,
        "wires": [
            [
                "b08b2d00.d26d9"
            ]
        ]
    },
    {
        "id": "aa30e878.0f73d8",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Create a Chart Array for Chart.js",
        "func": "// This function reformats the timeseries data into an array that \n// Chart.js (See http://www.chartjs.org/ ) will plot\n// The node-red-dashboard Chart node uses Chart.js \n\nvar starttime = flow.get(\"start-time\");\nvar endtime = flow.get(\"end-time\");\n\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\n// The Array has this structure, inserting the first element as a template.\nvar ChartData = [ {\"series\":[\"Data\"],\n                   \"data\":[[{\"x\":msg.payload[0].time,\"y\":msg.payload[0].stat}]],\n                   \"labels\":[\"Data\"]}];\n\n// Start at 1 because we've already added element 0 in the initial array definition\nfor( var i=1; i < msg.payload.length; i++ ) {\n    if( (msg.payload[i].time >= starttime) && (msg.payload[i].time <= endtime) ) {\n        // This temperature reading is within the Date Range\n        ChartData[0].data[0].push( { \"x\":msg.payload[i].time,\"y\":msg.payload[i].stat } );\n    }    \n}\n// Now we need to sort on the time so that we give the Chart node an array in time order\nChartData[0].data[0].sort(function sortNumber(a,b) { return a.x - b.x; });\n\nmsg.payload = ChartData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "f41907c8.3f7578",
        "type": "ui_chart",
        "z": "a1acccb3.2bec1",
        "name": "",
        "group": "3e86ac6a.9a4134",
        "order": 1,
        "width": "9",
        "height": "9",
        "label": "Today Activity",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "40",
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "cc4081db.98f1",
        "type": "ui_dropdown",
        "z": "a1acccb3.2bec1",
        "name": "Range Decide",
        "label": "Range",
        "tooltip": "Range",
        "place": "",
        "group": "4a7dba1d.0bee34",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "This Week",
                "value": "Week",
                "type": "str"
            },
            {
                "label": "Last Week",
                "value": "Last",
                "type": "str"
            },
            {
                "label": "This Month",
                "value": "Month",
                "type": "str"
            },
            {
                "label": "Range",
                "value": "Range",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 340,
        "y": 860,
        "wires": [
            [
                "61c22224.a6d9dc"
            ]
        ]
    },
    {
        "id": "61c22224.a6d9dc",
        "type": "change",
        "z": "a1acccb3.2bec1",
        "name": "Start Time Range",
        "rules": [
            {
                "t": "set",
                "p": "range-history",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 860,
        "wires": [
            [
                "bf77b33.1017f5"
            ]
        ]
    },
    {
        "id": "ec92a9b2.220648",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Filter the Data by Range",
        "func": "\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values \n    msg.payload = [] ;\n    return msg;\n}\nvar starttime = flow.get(\"start-time\");\nvar endtime = new Date().getTime()\n\nvar rangeHist = flow.get(\"range-history\");\nnode.warn(rangeHist);\nswitch(rangeHist) {\n    case \"Day\":\n        starttime = endtime-86400000; //Miliseconds in one day\n        break;\n    case \"Week\":\n        starttime = endtime-604800000; //Miliseconds in one week\n        break;\n    case \"Month\":\n        starttime = endtime-2592000000; //Miliseconds in one week\n        break;\n    case \"Range\":\n        starttime = flow.get(\"start-time\");\n        endtime = flow.get(\"end-time\");\n        break;\n    default:\n        node.error(\"The range is not defined --Historical Data--\")\n        break;\n}\n\nvar FilteredData = [];\n\nnode.warn(starttime);\nnode.warn(endtime);\n\nfor( var i=0; i < msg.payload.length; i++ ) {\n    if( (msg.payload[i].time >= starttime) && (msg.payload[i].time <= endtime) ) {\n        // The value is in the range\n        FilteredData.push( msg.payload[i]);\n    }\n}\n\n//Sort by time\nFilteredData.sort(function sortNumber(a,b) { return a.time - b.time; });\n\nmsg.payload = FilteredData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e3311afa.0f6ca8",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Filter the Data by Range",
        "func": "\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values \n    msg.payload = [] ;\n    return msg;\n}\nvar starttime = flow.get(\"start-time\");\nvar endtime = new Date().getTime();\n\nvar rangeHist = flow.get(\"range-history\");\n//node.warn(rangeHist);\nswitch(rangeHist) {\n    case \"Week\":\n        starttime = endtime-604800000; //Miliseconds in one week\n        break;\n    case \"Last\":\n        starttime = endtime-1209600000; //Miliseconds in one week\n        endtime -=604800000;\n        break;\n    case \"Month\":\n        starttime = endtime-2592000000; //Miliseconds in one week\n        break;\n    case \"Range\":\n        starttime = flow.get(\"start-time\");\n        endtime = flow.get(\"end-time\");\n        break;\n    default:\n        node.error(\"The range is not defined --Historical Data--\")\n        break;\n}\n\nvar FilteredData = [];\n\n//node.warn(starttime);\n//node.warn(endtime);\n\nfor( var i=0; i < msg.payload.length; i++ ) {\n    if((msg.payload[i].stat<2) && (msg.payload[i].time >= starttime) && (msg.payload[i].time <= endtime) ) {\n        // The value is in the range\n        FilteredData.push( msg.payload[i]);\n    }\n}\n\n//Sort by time\nFilteredData.sort(function sortNumber(a,b) { return a.time - b.time; });\n\nmsg.payload = FilteredData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 380,
        "wires": [
            [
                "9222daf4.7ddf68",
                "8dc3cd3c.aeedc",
                "f331f3b3.300e"
            ]
        ]
    },
    {
        "id": "2ae9251.88326da",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Filter the Data by Range 1 Day",
        "func": "\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values \n    msg.payload = [] ;\n    return msg;\n}\n\nvar endtime = new Date().getTime()\nvar starttime = endtime-86400000; //Miliseconds in one day\n\n\nvar FilteredData = [];\n\nfor( var i=0; i < msg.payload.length; i++ ) {\n    if( (msg.payload[i].stat<2) && (msg.payload[i].time >= starttime) && (msg.payload[i].time <= endtime) ) {\n        // The value is in the range\n        FilteredData.push( msg.payload[i]);\n    }\n}\n\n//Sort by time\nFilteredData.sort(function sortNumber(a,b) { return a.time - b.time; });\n\nmsg.payload = FilteredData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 160,
        "wires": [
            [
                "2b12edac.2425e2"
            ]
        ]
    },
    {
        "id": "f6fdee3.b5fc41",
        "type": "cloudant in",
        "z": "a1acccb3.2bec1",
        "name": "",
        "cloudant": "",
        "database": "historicaldata",
        "service": "IBM workshop TJS-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "2ae9251.88326da",
                "7a482453.004d0c",
                "1ca9cf4f.02d431"
            ]
        ]
    },
    {
        "id": "abb82727.c228e8",
        "type": "comment",
        "z": "a1acccb3.2bec1",
        "name": "Donut Graph Today",
        "info": "",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "bd95ad1b.c7a1c",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "adapt",
        "func": "\nif(msg.payload === 1) {  \n    msg.payload =  \"https://drive.google.com/uc?export=view&id=17fCx8Rg9_CeSlACZVj96YrIUHvPOK5HJ\";\n} \nelse{\n    msg.payload = \"https://drive.google.com/uc?export=view&id=1cHS1pwtzoV_PZ2OzPnVfXh2HBD1FsV2H\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 600,
        "wires": [
            [
                "fd90c512.7c76a8"
            ]
        ]
    },
    {
        "id": "fd90c512.7c76a8",
        "type": "ui_template",
        "z": "a1acccb3.2bec1",
        "group": "64f9ee43.cec9d",
        "name": "Status Display",
        "order": 2,
        "width": "9",
        "height": "9",
        "format": "\n<img \n    ng-src= {{msg.payload}} \n    alt='Image not found' />\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1180,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "aa144c36.d240b",
        "type": "inject",
        "z": "a1acccb3.2bec1",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "f6fdee3.b5fc41"
            ]
        ]
    },
    {
        "id": "c8353d65.a3cd2",
        "type": "ui_slider",
        "z": "a1acccb3.2bec1",
        "name": "",
        "label": "Hour Ago",
        "tooltip": "",
        "group": "64f9ee43.cec9d",
        "order": 3,
        "width": "9",
        "height": "1",
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": "1",
        "max": "23",
        "step": 1,
        "x": 720,
        "y": 620,
        "wires": [
            [
                "4d3cab37.91b8c4"
            ]
        ]
    },
    {
        "id": "4d3cab37.91b8c4",
        "type": "ui_text",
        "z": "a1acccb3.2bec1",
        "group": "64f9ee43.cec9d",
        "order": 4,
        "width": "1",
        "height": "1",
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1170,
        "y": 640,
        "wires": []
    },
    {
        "id": "6c5e8a0b.d15eb4",
        "type": "ui_chart",
        "z": "a1acccb3.2bec1",
        "name": "",
        "group": "e5fa6146.ce1e",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "Wetness by Day",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "40",
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1200,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9222daf4.7ddf68",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Organize Vertical Bars Wetness Days",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\n\n\nvar WetCount = [0,0,0,0,0,0,0]; //Array of the days of the week\nvar lasttime = 0\nfor( var i=0; i < msg.payload.length; i++ ) {\n    var timeDif=msg.payload[i].time-lasttime;\n    if(timeDif<=6000){\n        continue;\n    }\n    //node.warn(timeDif)\n    var date = new Date(msg.payload[i].time);\n    WetCount[date.getDay()]++;\n    lasttime = msg.payload[i].time;\n}\n//node.warn(WetCount);\n\nvar bar={};\nbar.labels = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nbar.series = ['Data'];\n// An array of 4 arrays of 7 elements\nbar.data = [ \n    WetCount \n    ];\n\nreturn {payload:[bar]};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 380,
        "wires": [
            [
                "6c5e8a0b.d15eb4"
            ]
        ]
    },
    {
        "id": "d504bb45.7afc28",
        "type": "inject",
        "z": "a1acccb3.2bec1",
        "name": "Hide",
        "topic": "",
        "payload": "{\"group\":{\"hide\":[\"Historical_Data_Personalized_Date\"]}}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 630,
        "y": 960,
        "wires": [
            [
                "2505184b.337438"
            ]
        ]
    },
    {
        "id": "2505184b.337438",
        "type": "ui_ui_control",
        "z": "a1acccb3.2bec1",
        "name": "",
        "x": 1000,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "bf77b33.1017f5",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Show Range Group",
        "func": "\nif(msg.payload === \"Range\"){\n    msg.payload = {\"group\":{\"show\":[\"Historical_Data_Personalized_Date\"]}};\n}\nelse{\n    msg.payload = {\"group\":{\"hide\":[\"Historical_Data_Personalized_Date\"]}};\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 860,
        "wires": [
            [
                "2505184b.337438"
            ]
        ]
    },
    {
        "id": "927371f9.046ff",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Organize Hours Activity",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\nvar Hours =[];          //Array of Hours\nvar HoursTotalCount = [];   //Array of count the total number of values\nfor(var j=0; j<24;j++){\n    Hours.push(j);\n    HoursTotalCount.push(0);\n}\n\n\nvar ActTimeCount = [\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];\nfor( var i=0; i < msg.payload.length; i++ ) {\n    var date = new Date(msg.payload[i].time);\n    ActTimeCount[msg.payload[i].stat][date.getHours()]++;\n    HoursTotalCount[date.getHours()]++;\n}\n\n//for(var k=0;k<24;k++){\n//    if(HoursTotalCount[k]===0){\n//        continue;\n//    }\n//    ActTimeCount[0][k]/=HoursTotalCount[k];\n//    ActTimeCount[0][k]*=100;\n//    ActTimeCount[1][k]/=HoursTotalCount[k];\n//    ActTimeCount[1][k]*=100;\n//}\n\n//node.warn(Hours);\n//node.warn(HoursTotalCount);\n\n\n//var bar={};\n//bar.labels = Hours;\n//bar.series = ['Normal','Active'];\n//bar.data =  ActTimeCount ;\n//node.warn(ActTimeCount);\n\nreturn {payload:[ActTimeCount]};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 40,
        "wires": [
            [
                "7de30b87.a49ce4"
            ]
        ]
    },
    {
        "id": "325d96c8.dc6c6a",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Organize Days Activity",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\nvar ActDaysCount = \n[[0,0,0,0,0,0,0],\n[0,0,0,0,0,0,0]]; //Array of the days of the week\n\nvar DaysTotalCount = [0,0,0,0,0,0,0];\n\nfor( var i=0; i < msg.payload.length; i++ ) {\n    var date = new Date(msg.payload[i].time);\n    ActDaysCount[msg.payload[i].stat][date.getDay()]++;\n    DaysTotalCount[date.getDay()]++;\n}\n\n//for(var j=0;j<7;j++){\n//    if(DaysTotalCount[j]===0){\n//        continue;\n//    }\n//    ActDaysCount[0][j]/=DaysTotalCount[j];\n//    ActDaysCount[0][j]*=100;\n//    ActDaysCount[1][j]/=DaysTotalCount[j];\n//    ActDaysCount[1][j]*=100;\n//}\n\n//node.warn(ActDaysCount);\n\n//var bar={};\n//bar.labels = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n//bar.series = ['Normal','Active'];\n//bar.data =  ActDaysCount ;\n\nreturn {payload:[ActDaysCount]};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 100,
        "wires": [
            [
                "c2ea6043.3090d"
            ]
        ]
    },
    {
        "id": "7a482453.004d0c",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Order the Data",
        "func": "msg.payload.sort(function sortNumber(a,b) { return a.time - b.time; });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "d1599e7.456606"
            ]
        ]
    },
    {
        "id": "7de30b87.a49ce4",
        "type": "link out",
        "z": "a1acccb3.2bec1",
        "name": "HistChartOut-HoursActivity",
        "links": [
            "1c363f5c.59fcb1"
        ],
        "x": 1175,
        "y": 40,
        "wires": []
    },
    {
        "id": "c2ea6043.3090d",
        "type": "link out",
        "z": "a1acccb3.2bec1",
        "name": "HistChartOut-DaysActivity",
        "links": [
            "a539d80e.d58088"
        ],
        "x": 1175,
        "y": 100,
        "wires": []
    },
    {
        "id": "4651a9b5.508b48",
        "type": "link in",
        "z": "a1acccb3.2bec1",
        "name": "",
        "links": [
            "6dfd8caf.e5db14",
            "b09ddc20.dd41a"
        ],
        "x": 140,
        "y": 220,
        "wires": [
            [
                "f6fdee3.b5fc41"
            ]
        ]
    },
    {
        "id": "71614aa6.5aab64",
        "type": "link out",
        "z": "a1acccb3.2bec1",
        "name": "OutHistChart-LastValue",
        "links": [
            "8f5d9194.2661f"
        ],
        "x": 1055,
        "y": 220,
        "wires": []
    },
    {
        "id": "d1599e7.456606",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Get Last Wetness",
        "func": " \n for(var j=msg.payload.length-1;j>=0;j--){\n     if(msg.payload[j].wet){\n         //node.warn(\"Value found\")\n         var lastDate = new Date(msg.payload[j].time);\n          var datetoString= lastDate.toString().split(' ');\n         msg.payload = datetoString[0]+\" \"+datetoString[1]+\" \"+datetoString[2]+\" \"+datetoString[3]+\" \"+datetoString[4];\n         //node.warn(msg.payload)\n         return msg;\n     }\n     \n }\n msg.payload =\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 220,
        "wires": [
            [
                "71614aa6.5aab64"
            ]
        ]
    },
    {
        "id": "42c58f73.5501a",
        "type": "debug",
        "z": "a1acccb3.2bec1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "1ca9cf4f.02d431",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Filter the Data by Range 1 Week",
        "func": "\nif( msg.payload.length === 0 ) {\n    // The historical database does not contain values \n    msg.payload = [] ;\n    return msg;\n}\n\nvar endtime = new Date().getTime()\nvar starttime = endtime-604800000; //Miliseconds in one day\n\n\nvar FilteredData = [];\n\nfor( var i=0; i < msg.payload.length; i++ ) {\n    if( (msg.payload[i].stat<2) && (msg.payload[i].time >= starttime) && (msg.payload[i].time <= endtime) ) {\n        // The value is in the range\n        FilteredData.push( msg.payload[i]);\n    }\n}\n\n//Sort by time\nFilteredData.sort(function sortNumber(a,b) { return a.time - b.time; });\n\nmsg.payload = FilteredData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 100,
        "wires": [
            [
                "927371f9.046ff",
                "325d96c8.dc6c6a"
            ]
        ]
    },
    {
        "id": "8dc3cd3c.aeedc",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Organize Hours Activity by Range",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\nvar Hours =[];          //Array of Hours\nvar HoursTotalCount = [];   //Array of count the total number of values\nfor(var j=0; j<24;j++){\n    Hours.push(j);\n    HoursTotalCount.push(0);\n}\n\n\nvar ActTimeCount = [\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];\nfor( var i=0; i < msg.payload.length; i++ ) {\n    var date = new Date(msg.payload[i].time);\n    ActTimeCount[msg.payload[i].stat][date.getHours()]++;\n    HoursTotalCount[date.getHours()]++;\n}\n\nfor(var k=0;k<24;k++){\n    if(HoursTotalCount[k]===0){\n        continue;\n    }\n    ActTimeCount[0][k]/=HoursTotalCount[k];\n    ActTimeCount[0][k]*=100;\n    ActTimeCount[1][k]/=HoursTotalCount[k];\n    ActTimeCount[1][k]*=100;\n}\n\n//node.warn(Hours);\n//node.warn(HoursTotalCount);\n\n\nvar bar={};\nbar.labels = Hours;\nbar.series = ['Normal','Active'];\nbar.data =  ActTimeCount ;\n\nnode.warn(ActTimeCount);\n\nreturn {payload:[bar]};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 440,
        "wires": [
            [
                "2742b6bc.d5fc7a"
            ]
        ]
    },
    {
        "id": "f331f3b3.300e",
        "type": "function",
        "z": "a1acccb3.2bec1",
        "name": "Organize Days Activity by Range",
        "func": "if( msg.payload.length === 0 ) {\n    // The historical database does not contain values for this date range \n    // Reset the chart with a blank array\n    msg.payload = [] ;\n    return msg;\n}\n\nvar ActDaysCount = \n[[0,0,0,0,0,0,0],\n[0,0,0,0,0,0,0]]; //Array of the days of the week\n\nvar DaysTotalCount = [0,0,0,0,0,0,0];\n\nfor( var i=0; i < msg.payload.length; i++ ) {\n    var date = new Date(msg.payload[i].time);\n    ActDaysCount[msg.payload[i].stat][date.getDay()]++;\n    DaysTotalCount[date.getDay()]++;\n}\n\nfor(var j=0;j<7;j++){\n    if(DaysTotalCount[j]===0){\n        continue;\n    }\n    ActDaysCount[0][j]/=DaysTotalCount[j];\n    ActDaysCount[0][j]*=100;\n    ActDaysCount[1][j]/=DaysTotalCount[j];\n    ActDaysCount[1][j]*=100;\n}\n\n//node.warn(ActDaysCount);\n\nvar bar={};\nbar.labels = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nbar.series = ['Normal','Active'];\nbar.data =  ActDaysCount ;\n\nreturn {payload:[bar]};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 500,
        "wires": [
            [
                "9c0f349d.2cd7a8"
            ]
        ]
    },
    {
        "id": "2742b6bc.d5fc7a",
        "type": "ui_chart",
        "z": "a1acccb3.2bec1",
        "name": "",
        "group": "e5fa6146.ce1e",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "Activity by Hours",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "40",
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1210,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "9c0f349d.2cd7a8",
        "type": "ui_chart",
        "z": "a1acccb3.2bec1",
        "name": "",
        "group": "e5fa6146.ce1e",
        "order": 1,
        "width": "0",
        "height": "0",
        "label": "Activity by Day",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "40",
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "outputs": 1,
        "x": 1200,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4a7dba1d.0bee34",
        "type": "ui_group",
        "z": "",
        "name": "Time period",
        "tab": "29e17974.fcf316",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d98fe0ec.3748e",
        "type": "cloudant",
        "z": "",
        "host": "https://16ad429e-9d49-4534-afa9-7955a9981991-bluemix:b95ca428fb2cd18ae9106e393f14eb7c45d82fd58bb53c5a04f821607b0e268e@16ad429e-9d49-4534-afa9-7955a9981991-bluemix.cloudant.com",
        "name": "cloudant-xh"
    },
    {
        "id": "9a3ba5c9.628aa8",
        "type": "ui_group",
        "z": "",
        "name": "Personalized Date",
        "tab": "29e17974.fcf316",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3e86ac6a.9a4134",
        "type": "ui_group",
        "z": "",
        "name": "Graphs",
        "tab": "5e176623.d4a868",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "64f9ee43.cec9d",
        "type": "ui_group",
        "z": "",
        "name": "Change ESP8266 Reporting Interval",
        "tab": "be1bb07.7cb7a5",
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "e5fa6146.ce1e",
        "type": "ui_group",
        "z": "",
        "name": "Historical Data",
        "tab": "29e17974.fcf316",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "29e17974.fcf316",
        "type": "ui_tab",
        "z": "",
        "name": "Historical Data",
        "icon": "fa-area-chart",
        "order": 3
    },
    {
        "id": "5e176623.d4a868",
        "type": "ui_tab",
        "z": "",
        "name": "Recent Data",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "be1bb07.7cb7a5",
        "type": "ui_tab",
        "z": "",
        "name": "ESP8266 Interval",
        "icon": "dashboard",
        "order": 6,
        "disabled": true,
        "hidden": true
    }
]